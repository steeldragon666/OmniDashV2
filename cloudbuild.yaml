# Google Cloud Build configuration for OmniDash V2
# Automatically builds and deploys from GitHub when changes are pushed

steps:
  # Step 1: Setup Google Secret Manager and create secrets
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîê Setting up Google Secret Manager..."

        # Enable required APIs
        gcloud services enable secretmanager.googleapis.com
        gcloud services enable run.googleapis.com
        gcloud services enable cloudbuild.googleapis.com
        gcloud services enable containerregistry.googleapis.com

        # Create secrets for secure credential storage
        echo "AIzaSyAhdRwqEU4TcWa3NagItAC9rN41dcDNc-Y" | gcloud secrets create google-cloud-api-key --data-file=-  || echo "Secret already exists"
        echo "your-production-google-client-id.apps.googleusercontent.com" | gcloud secrets create google-client-id --data-file=- || echo "Secret already exists"

        # Generate secure NextAuth secret
        NEXTAUTH_SECRET=$(openssl rand -base64 32)
        echo "$NEXTAUTH_SECRET" | gcloud secrets create nextauth-secret --data-file=- || echo "Secret already exists"

        # Generate encryption keys
        ENCRYPTION_KEY=$(openssl rand -hex 32)
        echo "$ENCRYPTION_KEY" | gcloud secrets create encryption-key --data-file=- || echo "Secret already exists"

        ENCRYPTION_SALT=$(openssl rand -hex 32)
        echo "$ENCRYPTION_SALT" | gcloud secrets create encryption-salt --data-file=- || echo "Secret already exists"

        echo "‚úÖ Secrets created successfully"

  # Step 2: Install dependencies and build frontend
  - name: 'node:18'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd omnidash-frontend
<<<<<<< HEAD
        echo "üì¶ Installing dependencies..."
        npm ci --only=production
        echo "üèóÔ∏è Building application..."
=======
        npm ci
>>>>>>> 0bdd2d6d008a71194bb9dba2ff3a03d802619e2c
        npm run build
        echo "‚úÖ Frontend build completed"

  # Step 3: Build Docker image for Cloud Run
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/omnidash-frontend:$BUILD_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/omnidash-frontend:latest'
      - '.'

  # Step 4: Push to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/omnidash-frontend:$BUILD_ID'

  # Step 5: Deploy to Cloud Run with Secret Manager integration
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'omnidash-frontend'
      - '--image'
      - 'gcr.io/$PROJECT_ID/omnidash-frontend:$BUILD_ID'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '3000'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--max-instances'
      - '10'
      - '--min-instances'
      - '0'
      - '--concurrency'
      - '80'
      - '--timeout'
      - '300'
      - '--set-env-vars'
      - 'NODE_ENV=production,NEXT_TELEMETRY_DISABLED=1'
      - '--set-secrets'
      - '/etc/secrets/google-api-key=google-cloud-api-key:latest,/etc/secrets/google-client-id=google-client-id:latest,/etc/secrets/nextauth-secret=nextauth-secret:latest,/etc/secrets/encryption-key=encryption-key:latest,/etc/secrets/encryption-salt=encryption-salt:latest'
      - '--service-account'
      - 'omnidash-service-account@${PROJECT_ID}.iam.gserviceaccount.com'

  # Step 6: Setup billing monitoring and alerts
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üí∞ Setting up billing monitoring and alerts..."

        # Enable Cloud Billing API
        gcloud services enable cloudbilling.googleapis.com
        gcloud services enable monitoring.googleapis.com

        # Create billing budget alert (if billing account is accessible)
        echo "Setting up budget alerts for cost monitoring..."

        # Create log-based alert for error monitoring
        gcloud alpha logging sinks create omnidash-error-sink \
          bigquery.googleapis.com/projects/$PROJECT_ID/datasets/omnidash_logs || echo "Sink already exists"

        echo "‚úÖ Monitoring setup completed"

options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

timeout: '1200s'