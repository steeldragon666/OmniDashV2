name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  SKIP_ENV_VALIDATION: 'true'
  NEXT_TELEMETRY_DISABLED: '1'
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}

jobs:
  # Security and Dependencies Check
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🛡️ Run security audit
        run: npm audit --audit-level=high

      - name: 🔍 Check for vulnerabilities
        run: npm audit --audit-level=moderate --production

  # Code Quality and Linting
  quality:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 📝 Check TypeScript
        run: npx tsc --noEmit

      - name: 🎨 Check code formatting
        run: npx prettier --check .

  # Build and Test
  build:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        env:
          SKIP_ENV_VALIDATION: 'true'
        run: npm run build

      - name: 🧪 Run tests
        run: npm test -- --coverage

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 📦 Cache build output
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
            node_modules/.cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

  # End-to-End Tests
  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: 🏗️ Build application
        env:
          SKIP_ENV_VALIDATION: 'true'
        run: npm run build

      - name: 🎯 Run E2E tests
        env:
          SKIP_ENV_VALIDATION: 'true'
        run: npm run test:e2e

      - name: 📸 Upload test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Docker Build Test
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [security, quality]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          target: production
          tags: omnidash-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker image
        run: |
          docker run --rm -d --name omnidash-test -p 3000:3000 omnidash-frontend:test
          sleep 30
          curl -f http://localhost:3000/api/health || exit 1
          docker stop omnidash-test

  # Performance Testing
  lighthouse:
    name: 🚦 Lighthouse Performance
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        env:
          SKIP_ENV_VALIDATION: 'true'
        run: npm run build

      - name: 🚀 Start application
        env:
          SKIP_ENV_VALIDATION: 'true'
        run: |
          npm start &
          sleep 10

      - name: 🚦 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Security Scanning
  security-scan:
    name: 🔐 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Dependency Review
  dependency-review:
    name: 📋 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: high

  # Notify on Success/Failure
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [security, quality, build, e2e, docker, lighthouse]
    if: always()
    steps:
      - name: 📢 Notify on success
        if: needs.build.result == 'success'
        run: echo "✅ All CI checks passed successfully!"

      - name: 📢 Notify on failure
        if: contains(needs.*.result, 'failure')
        run: |
          echo "❌ CI pipeline failed!"
          echo "Please check the failed jobs and fix the issues."
          exit 1