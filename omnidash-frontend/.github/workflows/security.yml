name: 🛡️ Security Monitoring

on:
  schedule:
    - cron: '0 6 * * 1' # Weekly on Monday at 6 AM UTC
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  # Dependency Vulnerability Scanning
  dependency-scan:
    name: 📦 Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 NPM Audit
        run: |
          npm audit --audit-level=high --json > npm-audit.json || true
          cat npm-audit.json

      - name: 📊 Upload audit results
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-results
          path: npm-audit.json

  # CodeQL Analysis
  codeql:
    name: 🔍 CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: 🔍 Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: 📊 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # Secret Scanning
  secret-scan:
    name: 🔐 Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔐 TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Docker Image Scanning
  docker-scan:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Build Docker image
        run: |
          docker build -t omnidash-security-scan:latest .

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'omnidash-security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # License Compliance Check
  license-check:
    name: 📜 License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📜 Check licenses
        run: |
          npx license-checker --summary --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC" --production

  # SAST (Static Application Security Testing)
  sast-scan:
    name: 🔬 SAST Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔬 Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Security Headers Check
  security-headers:
    name: 🌐 Security Headers Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: 🌐 Check security headers
        run: |
          echo "Checking security headers for production URL..."
          # This would check your deployed application
          # curl -I https://your-app.com | grep -E "(X-Frame-Options|X-Content-Type-Options|Strict-Transport-Security|Content-Security-Policy)"

  # Compliance Report
  compliance-report:
    name: 📋 Security Compliance Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql, secret-scan, docker-scan, license-check, sast-scan]
    if: always()
    steps:
      - name: 📊 Generate compliance report
        run: |
          echo "## 🛡️ Security Compliance Report" > security-report.md
          echo "" >> security-report.md
          echo "### Scan Results:" >> security-report.md
          echo "- **Dependency Scan**: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- **CodeQL Analysis**: ${{ needs.codeql.result }}" >> security-report.md
          echo "- **Secret Scan**: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- **Docker Scan**: ${{ needs.docker-scan.result }}" >> security-report.md
          echo "- **License Check**: ${{ needs.license-check.result }}" >> security-report.md
          echo "- **SAST Scan**: ${{ needs.sast-scan.result }}" >> security-report.md
          echo "" >> security-report.md
          echo "### Security Status: $(if [[ '${{ needs.dependency-scan.result }}' == 'success' && '${{ needs.codeql.result }}' == 'success' && '${{ needs.secret-scan.result }}' == 'success' && '${{ needs.docker-scan.result }}' == 'success' ]]; then echo '✅ PASSED'; else echo '❌ ISSUES FOUND'; fi)" >> security-report.md
          
          cat security-report.md

      - name: 📊 Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-compliance-report
          path: security-report.md

  # Notify security team
  security-notification:
    name: 📢 Security Notifications
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql, secret-scan, docker-scan, license-check, sast-scan]
    if: failure()
    steps:
      - name: 🚨 Security Alert
        run: |
          echo "🚨 SECURITY ALERT: Security vulnerabilities detected!"
          echo "Please review the security scan results and address any issues."
          # Add notification logic (Slack, email, etc.)
          # Example:
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🚨 Security vulnerabilities detected in OmniDash!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # Update security badges
  update-badges:
    name: 📛 Update Security Badges
    runs-on: ubuntu-latest
    needs: [compliance-report]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: 📛 Update security status badge
        run: |
          # Update security badge status
          # This could update a badge in README.md or external service
          echo "Security badge updated"