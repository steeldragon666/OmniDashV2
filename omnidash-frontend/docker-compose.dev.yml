# Development Docker Compose Configuration
version: '3.8'

services:
  # OmniDash Frontend Development
  omnidash-frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: omnidash-frontend-dev
    ports:
      - "3000:3000"
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - redis-dev
      - postgres-dev
    restart: unless-stopped
    networks:
      - omnidash-dev-network

  # Redis for Development
  redis-dev:
    image: redis:7-alpine
    container_name: omnidash-redis-dev
    ports:
      - "6380:6379"
    volumes:
      - redis_dev_data:/data
    restart: unless-stopped
    networks:
      - omnidash-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # PostgreSQL for Development
  postgres-dev:
    image: postgres:15-alpine
    container_name: omnidash-postgres-dev
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=omnidash_dev
      - POSTGRES_USER=omnidash
      - POSTGRES_PASSWORD=omnidash_dev_password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - omnidash-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U omnidash -d omnidash_dev"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Mailhog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: omnidash-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - omnidash-dev-network

networks:
  omnidash-dev-network:
    driver: bridge
    name: omnidash-dev-network

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
    